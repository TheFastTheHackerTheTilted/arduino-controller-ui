using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO.Ports;
using Microsoft.Win32;


namespace ArduinoController
{

    public partial class Form : System.Windows.Forms.Form
    {
        private SerialPort serialPort;
        private String portId;
        private Int32 baudRate;
        private Boolean deviceOpen = false;
        private Boolean connected = false;
        private byte[] pixelData = new byte[1024];
        public Form()
        {
            InitializeComponent();
            this.MouseDown += Form1_MouseDown;
            this.MouseMove += Form1_MouseMove;
            this.MouseUp += Form1_MouseUp;
            InitializePixelData();

        }

        private void Form1_Load(object sender, EventArgs e)
        {
            portId = "COM1";
            baudRate = 9600;
            bt_reloadPorts_click(sender, e);
            Paint += MainForm_Paint;
        }
        private void sendMessage(object sender, KeyPressEventArgs e)
        {
            if (connected == true)
            {
                //defines what type of input is being send
                // 0 for device key
                // 1 for next message
                byte opcode;
                if (deviceOpen == true) { opcode = 1; }
                else { opcode = 0; }

                if (e.KeyChar == (char)Keys.Enter && inputBox.Text != "" && inputBox.TextLength < 11)
                {
                    serialPort.Write(new byte[] { opcode }, 0, 1);
                    uint input = uint.Parse(inputBox.Text);
                    byte[] valueBytes = BitConverter.GetBytes(input);
                    try
                    {
                        serialPort.Write(valueBytes, 0, sizeof(uint));
                        inputBox.Text = "";
                    }
                    catch (Exception)
                    {
                        // Handle the exception here
                        MessageBox.Show("Couldn't send the input!", "ER003", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                    // Prevent the Enter key from producing a "ding" sound
                    e.Handled = true;
                }
                else if (!char.IsDigit(e.KeyChar) && (!char.IsControl(e.KeyChar)))
                {
                    e.Handled = true;
                }
            }
            else {
                MessageBox.Show("Couldn't send the input, not connected!", "ER004", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }


        }
        private delegate void UpdateLabelDelegate(string text);
        private static void PrintByteArray(byte[] bytes)
        {
            foreach (byte b in bytes)
            {
                Console.Write(b.ToString("X2") + " ");
            }
            Console.WriteLine();
        }
        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {


            // -- POSSIBLE REPONSES FROM THE ARDUINO--
            // DEVICE LOGIN RESPONSE
            // TEMP KEY RESPONSE
            // ERROR MESSAGE
            // IMAGE DATA

            string receivedData = serialPort.ReadLine();
            //string receivedData = "nukk";
            
            Console.WriteLine("Arduino: " + receivedData);


            if (receivedData.Contains("DEVICE LOGIN RESPONSE")){
                Console.WriteLine("Check if response is correct");
                receivedData = serialPort.ReadLine();
                Console.WriteLine("Arduino: " + receivedData);
                if (receivedData.Contains("correct")) {
                    this.deviceOpen = true;
                }
                UpdateLabel(receivedData);
            }
            else if (receivedData.Contains("TEMP KEY RESPONSE")){
                receivedData = serialPort.ReadLine();
                Console.WriteLine("Arduino: "+receivedData);
                UpdateLabel(receivedData);
            }
            else if (receivedData.Contains("ERROR MESSAGE")){
                receivedData = serialPort.ReadLine();
                Console.WriteLine("Arduino: " + receivedData);
                UpdateLabel(receivedData);
            }
            else if (receivedData.Contains("IMAGE DATA")){
                byte[] newByteArray = new byte[1024];
                int bytesRead = 0;
                while (bytesRead < 1024)
                {
                    int bytesRemaining = 1024 - bytesRead;
                    int bytesReadThisIteration = serialPort.Read(newByteArray, bytesRead, bytesRemaining);
                    bytesRead += bytesReadThisIteration;
                    //await Task.Delay(500);
                    Console.WriteLine(bytesRead);
                }
                Console.WriteLine("Now its more or equal to 1024");
                bytesRead = 0;
                serialPort.Read(newByteArray, 0, 1024);

                pixelData = newByteArray;
                Paint += MainForm_Paint;
            }


            //outputBox.Text = receivedData;
            // Perform any required actions with the received data
        }
        private void UpdateLabel(string text)
        {
            if (outputBox.InvokeRequired)
            {
                // If called from a different thread, invoke the delegate on the UI thread
                UpdateLabelDelegate updateLabelDelegate = new UpdateLabelDelegate(UpdateLabel);
                outputBox.Invoke(updateLabelDelegate, new object[] { text });
            }
            else
            {
                // Update the label directly on the UI thread
                outputBox.Text = text;
            }
        }

        private void bt_connect_Click(object sender, EventArgs e)
        {
            string selectedPort = portList.SelectedItem.ToString();
            try
            {
                this.serialPort = new SerialPort(selectedPort, baudRate);
                serialPort.DataReceived += new SerialDataReceivedEventHandler(SerialPort_DataReceived);
                serialPort.Open();
                this.connected = true;
                Console.WriteLine(selectedPort);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Could not connect to the port!\n"+ex.Message, "ER001", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

        }
        private void bt_exit_Click(object sender, EventArgs e)
        {
            try
            {
                serialPort.Close();
                this.Close();
            }
            catch (NullReferenceException)
            {
                this.Close();
            }
        }
        private void bt_disconnect_Click(object sender, EventArgs e)
        {
            try
            {
                serialPort.Close();
                this.connected = false;
                this.deviceOpen = false;
                MessageBox.Show("Succesfully disconnected.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception)
            {
                // Handle the exception here
                MessageBox.Show("Port couldn't closed, probably it was never open.", "ER002", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private bool isDragging;
        private Point offset;
        private void Form1_MouseDown(object sender, MouseEventArgs e)
        {
            isDragging = true;
            offset = new Point(e.X, e.Y);
        }
        private void Form1_MouseMove(object sender, MouseEventArgs e)
        {
            if (isDragging)
            {
                Point newLocation = this.PointToScreen(e.Location);
                newLocation.Offset(-offset.X, -offset.Y);
                this.Location = newLocation;
            }
        }
        private void Form1_MouseUp(object sender, MouseEventArgs e)
        {
            isDragging = false;
        }

        private string[] getPortList(){
            return SerialPort.GetPortNames();
        }
        private void bt_reloadPorts_click(object sender, EventArgs e)
        {
            portList.Items.Clear();
            portList.Items.Add("[None]");
            portList.SelectedIndex = 0;
            string[] portNames = getPortList();
            //Console.WriteLine(portNames);
            foreach (string portName in portNames)
            {
                // Do something with each active port name
                Console.WriteLine(portName);
                portList.Items.Add(portName);
            }
        }

        private void autoPort_CheckedChanged(object sender, EventArgs e)
        {
            if (autoPort.Checked)
            {
                // Code to execute when the checkbox is checked
                string[] portNames = getPortList();
                foreach (string i in portNames)
                {
                    if (i.Contains("COM")){
                        Console.WriteLine("name of port:",i);
                        portId = i;
                        portList.Items.Clear();
                        portList.Items.Add(i);
                        portList.SelectedIndex = 0;
                    }
                }
                portList.Enabled = false;
                bt_reloadPorts.Enabled = false;
            }
            else
            {
                portList.Enabled = true;
                bt_reloadPorts.Enabled = true;
                bt_reloadPorts_click(sender, e);
                // Code to execute when the checkbox is unchecked
                // (optional, if needed)
            }
        }

        private string GetDeviceNameFromPort(string portName)
        {
            string deviceName = string.Empty;

            try
            {
                using (RegistryKey key = Registry.LocalMachine.OpenSubKey(@"HARDWARE\DEVICEMAP\SERIALCOMM"))
                {
                    if (key != null)
                    {
                        foreach (string valueName in key.GetValueNames())
                        {
                            string value = key.GetValue(valueName) as string;
                            if (value != null && value.Equals(portName, StringComparison.OrdinalIgnoreCase))
                            {
                                string friendlyName = GetFriendlyNameFromDeviceKey(valueName);
                                if (!string.IsNullOrEmpty(friendlyName))
                                {
                                    deviceName = friendlyName;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // Handle any exception that occurred while retrieving port information
                Console.WriteLine("Error: " + ex.Message);
            }

            return deviceName;
        }

        private string GetFriendlyNameFromDeviceKey(string deviceKey)
        {
            string friendlyName = string.Empty;

            try
            {
                using (RegistryKey key = Registry.LocalMachine.OpenSubKey($@"SYSTEM\CurrentControlSet\Enum\{deviceKey}"))
                {
                    if (key != null)
                    {
                        foreach (string subKeyName in key.GetSubKeyNames())
                        {
                            using (RegistryKey subKey = key.OpenSubKey(subKeyName))
                            {
                                if (subKey != null && subKey.GetValue("FriendlyName") is string value)
                                {
                                    friendlyName = value;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // Handle any exception that occurred while retrieving device information
                Console.WriteLine("Error: " + ex.Message);
            }

            return friendlyName;
        }


        private void InitializePixelData()
        {
            byte[] newByteArray = new byte[1024]{0x1c, 0x19, 0x18, 0x1e, 0x29, 0x42, 0x75, 0x84, 0x8b, 0x9d, 0xb1, 0xb5, 0xc1, 0xc4, 0xc8, 0xcf, 0xdf, 0xdd, 0xdf, 0xe8, 0xea, 0xe9, 0xe6, 0xdf, 0xd5, 0xcd, 0xbb, 0xa2, 0x58, 0x2d, 0x28, 0x24, 0x1d, 0x16, 0x1c, 0x1d, 0x28, 0x61, 0x8b, 0x96, 0x9d, 0xa6, 0xb4, 0xbd, 0xca, 0xcc, 0xcf, 0xd8, 0xda, 0xe2, 0xe7, 0xe9, 0xea, 0xee, 0xea, 0xdc, 0xc0, 0xc4, 0xbf, 0xb3, 0x80, 0x36, 0x17, 0x17, 0x17, 0x15, 0x19, 0x17, 0x2b, 0x63, 0x83, 0x97, 0x9c, 0xab, 0xb7, 0xb9, 0xc6, 0xd1, 0xd7, 0xdd, 0xe4, 0xe8, 0xeb, 0xec, 0xea, 0xe8, 0xe6, 0xdc, 0xcf, 0xc7, 0xc7, 0xb1, 0xa3, 0x69, 0x2e, 0x18, 0x10, 0x18, 0x17, 0x1a, 0x36, 0x59, 0x7b, 0x8e, 0xa1, 0xac, 0xb8, 0xc0, 0xcb, 0xd3, 0xd9, 0xe6, 0xf2, 0xee, 0xed, 0xf2, 0xf6, 0xef, 0xe8, 0xdf, 0xd9, 0xcc, 0xc4, 0xb6, 0x9e, 0x7b, 0x64, 0x1e, 0xc, 0x18, 0x18, 0x20, 0x32, 0x53, 0x7a, 0x84, 0x9d, 0xa5, 0xb1, 0xbf, 0xce, 0xd7, 0xdc, 0xe9, 0xf4, 0xf0, 0xea, 0xea, 0xf8, 0xfb, 0xf4, 0xe3, 0xcd, 0xcf, 0xc4, 0xb6, 0xa1, 0x7d, 0x5b, 0x3a, 0xb, 0x1d, 0x1d, 0x22, 0x2a, 0x50, 0x6b, 0x7f, 0x93, 0x9c, 0xa4, 0xab, 0xb4, 0xc0, 0xc8, 0xd6, 0xd3, 0xd8, 0xdb, 0xda, 0xe3, 0xdf, 0xda, 0xce, 0xc4, 0xb8, 0xa2, 0x9c, 0x9f, 0x8c, 0x42, 0x3d, 0xa, 0x23, 0x23, 0x21, 0x2d, 0x55, 0x5f, 0x6b, 0x5b, 0x59, 0x59, 0x62, 0x67, 0x72, 0x86, 0xa9, 0xa9, 0xb3, 0xbf, 0xb9, 0xa8, 0x81, 0x6e, 0x67, 0x59, 0x4e, 0x50, 0x54, 0x78, 0x97, 0x37,
0x3f, 0x9, 0x22, 0x23, 0x17, 0x28, 0x54, 0x57, 0x3a, 0x3f, 0x37, 0x29, 0x25, 0x28, 0x3a, 0x54, 0x78, 0x91, 0x99, 0xa2, 0x97, 0x7c, 0x48, 0x32, 0x2d, 0x38, 0x47, 0x5f,
0x73, 0x67, 0x81, 0x47, 0x2c, 0xa, 0x1d, 0x1e, 0x17, 0x22, 0x4f, 0x3f, 0x45, 0x4b, 0x47, 0x35, 0x2b, 0x27, 0x30, 0x3b, 0x53, 0x7b, 0xb0, 0xc4, 0x96, 0x4f, 0x34, 0x2e,
0x2d, 0x33, 0x36, 0x3e, 0x64, 0x71, 0x77, 0x56, 0x2d, 0xe, 0x14, 0x16, 0x15, 0x23, 0x57, 0x47, 0x4a, 0x46, 0x2c, 0x45, 0x4a, 0x41, 0x2b, 0x2b, 0x2d, 0x67, 0xba, 0xda,
0xa2, 0x3c, 0x3d, 0x3a, 0x4b, 0x61, 0x65, 0x4c, 0x4d, 0x72, 0x84, 0x70, 0x1b, 0x17, 0x11, 0xd, 0x12, 0x1f, 0x5b, 0x52, 0x55, 0x40, 0x34, 0x41, 0x29, 0x2b, 0x56, 0x3b,
0x3d, 0x5e, 0xb0, 0xce, 0xb0, 0x6e, 0x4f, 0x69, 0x41, 0x3a, 0x73, 0x55, 0x81, 0x92, 0xa0, 0x9a, 0x19, 0x26, 0x20, 0xd, 0x11, 0x1f, 0x61, 0x67, 0x72, 0x67, 0x46, 0x6c,
0x76, 0x7b, 0x9a, 0x80, 0x72, 0x7c, 0xb7, 0xce, 0xb6, 0xa5, 0x9e, 0xa0, 0x9b, 0xa3, 0x9d, 0xa1, 0xc8, 0xc4, 0xc4, 0xb0, 0x3d, 0x35, 0x38, 0x11, 0x13, 0x24, 0x6b, 0x83, 0x95, 0xa0, 0x99, 0x9d, 0xa0, 0xaa, 0xa7, 0x9f, 0x84, 0x87, 0xbe, 0xcf, 0xbc, 0xad, 0xb1, 0xb5, 0xc7, 0xcc, 0xd2, 0xd4, 0xd2, 0xda, 0xcb, 0xbc, 0x6d, 0x39, 0x45, 0x12, 0x15, 0x27, 0x6f, 0x8e, 0xa4, 0xae, 0xb9, 0xb0, 0xb8, 0xb4, 0xb3, 0xa8, 0x84, 0x9b, 0xc4, 0xd2, 0xd4, 0xb1, 0xb9, 0xc2, 0xc7, 0xd7, 0xd7, 0xd9, 0xdb, 0xd5, 0xcc, 0xba, 0x88, 0x30, 0x42, 0x13, 0x18, 0x23, 0x68, 0x85, 0x9d, 0xae, 0xb0, 0xb8, 0xbd, 0xbd, 0xbe, 0xa9, 0x7c, 0x95, 0xbb, 0xcd, 0xc9, 0xb6, 0xb2, 0xcb, 0xd4, 0xd4, 0xd9, 0xdf, 0xd9, 0xd3, 0xce, 0xb9, 0x92, 0x23, 0x39, 0x15, 0x1d, 0x20, 0x62, 0x7c, 0x96, 0xa5, 0xb1, 0xbd, 0xc2, 0xc5, 0xc8, 0xab, 0x6f, 0x53, 0x77, 0x84, 0x8a, 0x65, 0x99, 0xc1, 0xe6, 0xe8, 0xe3, 0xdf, 0xdd, 0xce, 0xc8, 0xb8, 0x95, 0x1b, 0x26, 0x1b, 0x20, 0x1a, 0x5e, 0x75, 0x8b, 0x9f, 0xab, 0xbd, 0xc6, 0xc5, 0xc8, 0x99, 0x57, 0x24, 0x32,
0x52, 0x52, 0x50, 0x54, 0xa7, 0xde, 0xeb, 0xe8, 0xe1, 0xdf, 0xcd, 0xc1, 0xb4, 0x89, 0x13, 0x16, 0x16, 0x25, 0x17, 0x4f, 0x72, 0x85, 0x95, 0xa8, 0xba, 0xc5, 0xc9, 0xc3, 0x92, 0x5a, 0x50, 0x58, 0x65, 0x92, 0xb3, 0xa1, 0xcd, 0xdd, 0xe6, 0xda, 0xdd, 0xd9, 0xca, 0xc3, 0xb1, 0x73, 0x10, 0xe, 0x13, 0x25, 0x17, 0x3c, 0x6f, 0x83, 0x89, 0xa1, 0xb1, 0xbe, 0xc7, 0xc3, 0xa4, 0x8a, 0x84, 0x98, 0xba, 0xad, 0xc0, 0xbc, 0xc3, 0xd2, 0xd5, 0xae, 0xd2, 0xd3, 0xc5, 0xbe, 0xac, 0x5f, 0xb, 0xd, 0x9, 0x14, 0x13, 0x21, 0x62, 0x7b, 0x84, 0x9b, 0xab, 0xb7, 0xbe, 0xba, 0xa9, 0x9d, 0xa6, 0xb2, 0xd3, 0xca, 0xca, 0xca, 0xc6, 0xc1, 0xca, 0xcb, 0xc9, 0xd0, 0xc2, 0xba, 0xa2, 0x4e, 0xc, 0xf, 0x9, 0xa, 0x12, 0x13, 0x58, 0x72, 0x82, 0x93, 0xa5, 0xaf, 0xb0, 0xac, 0xa7, 0x9b, 0x8c, 0x79, 0x79, 0x8c, 0x81, 0x82, 0x94, 0xa4, 0xc0, 0xc0, 0xc1, 0xc6, 0xc5, 0xb2, 0x9f, 0x3e, 0xe, 0xe, 0xe, 0xb, 0x12, 0xe, 0x46, 0x66, 0x74, 0x90, 0xa3, 0xa1, 0xa5, 0xb0, 0x9c, 0x61, 0x41, 0x4d, 0x45, 0x4a, 0x62, 0x66, 0x65, 0x60, 0x8f, 0xb5, 0xc0, 0xce, 0xbf, 0xac, 0x9a, 0x21, 0x15, 0x13, 0x19, 0x11, 0x16, 0x11, 0x2d, 0x64, 0x70, 0x81, 0x99, 0xa4, 0xa1, 0x9e, 0x9c, 0x7e, 0x74, 0x85, 0xa9, 0xa7, 0xb2, 0xa4, 0x8e,
0xb0, 0xc5, 0xb6, 0xc0, 0xbe, 0xb1, 0xa2, 0x80, 0x14, 0x16, 0x16, 0x19, 0xc, 0x12, 0xe, 0x10, 0x61, 0x6c, 0x70, 0x82, 0x97, 0xa2, 0xa6, 0xae, 0x9b, 0x80, 0x78, 0x6a, 0x71, 0x68, 0x86, 0xa4, 0xbb, 0xc7, 0xc3, 0xb8, 0xac, 0xa9, 0x98, 0x52, 0x15, 0xf, 0xc, 0xd, 0x9, 0x12, 0xc, 0xb, 0x3c, 0x6c, 0x6d, 0x76, 0x7f, 0x93, 0x99, 0xa6, 0xa6,
0x95, 0x8a, 0x81, 0x72, 0x89, 0xa4, 0xbb, 0xc2, 0xbf, 0xb7, 0xad, 0xa7, 0x9b, 0x87, 0x19, 0xe, 0x10, 0x13, 0x11, 0xb, 0x9, 0xe, 0x10, 0x10, 0x58, 0x72, 0x75, 0x76, 0x7e, 0x90, 0x8e, 0xa4, 0xae, 0xb7, 0xc8, 0xc7, 0xd1, 0xdf, 0xd1, 0xc3, 0xb7, 0x9f, 0xa5, 0x9e, 0x87, 0x3d, 0x10, 0xf, 0x15, 0x13, 0x10, 0x14, 0x11, 0xd, 0x11, 0xf, 0x1a, 0x60, 0x70, 0x75, 0x75, 0x76, 0x91, 0x9d, 0xac, 0xb6, 0xc9, 0xca, 0xc9, 0xd8, 0xc5, 0xbb, 0xad, 0x9d, 0x8b, 0x77, 0x65, 0x32, 0x12, 0x16, 0x1a, 0x14, 0x12, 0x12, 0x12, 0x11, 0x10, 0xf, 0xe, 0xf, 0x4b, 0x69, 0x6d, 0x68, 0x77, 0x8b, 0x90, 0x98, 0xaf, 0xba, 0xb3, 0xb6, 0xa4, 0x9d, 0x96, 0x7a, 0x64, 0x5e, 0x7e, 0x37, 0x1c, 0x1a, 0x15,
0x13, 0x18, 0x18, 0x11, 0x13, 0x17, 0x10, 0x10, 0xe, 0x1a, 0x3b, 0x56, 0x60, 0x63, 0x68, 0x64, 0x69, 0x7c, 0x8d, 0x8c, 0x87, 0x7f, 0x77, 0x69, 0x58, 0x60, 0x6e, 0x82,
0x49, 0x1d, 0x18, 0x10, 0x18, 0x15, 0x19, 0x18, 0x10, 0x14, 0x11, 0x19, 0x14, 0xe, 0x2b, 0x3f, 0x4f, 0x5d, 0x5f, 0x5d, 0x58, 0x56, 0x58, 0x59, 0x56, 0x59, 0x54, 0x5c,
0x61, 0x71, 0x8a, 0x8e, 0x33, 0x20, 0x16, 0x10, 0x23, 0x1e, 0x1a, 0x1f, 0x1e, 0x19, 0x11, 0x16, 0x17, 0x11, 0x1c, 0x39, 0x48, 0x54, 0x5d, 0x62, 0x62, 0x65, 0x64, 0x64, 0x61, 0x61, 0x5f, 0x6a, 0x7a, 0x8c, 0x98, 0x91, 0x2d, 0x16, 0x18, 0x35, 0x47, 0x56, 0x42, 0x27, 0x1d, 0x14, 0xf, 0x18, 0x20, 0x16, 0x13, 0x2e, 0x44, 0x4c, 0x55, 0x60, 0x62, 0x68, 0x65, 0x63, 0x63, 0x65, 0x70, 0x7d, 0x90, 0x96, 0xa2, 0x8a, 0x2d, 0x19, 0x25};
            pixelData = newByteArray;
            
            
        }

        private void MainForm_Paint(object sender, PaintEventArgs e)
        {
            int canvasSize = 32;

            Bitmap canvas = new Bitmap(canvasSize, canvasSize);

            // Iterate over each byte in the pixelData array and set the corresponding pixel color
            for (int y = 0; y < canvasSize; y++)
            {
                for (int x = 0; x < canvasSize; x++)
                {
                    byte pixelValue = pixelData[y * canvasSize + x];
                    Color pixelColor = Color.FromArgb(pixelValue, pixelValue, pixelValue);
                    canvas.SetPixel(x, y, pixelColor);

                }
            }

            pb_image.Image = canvas;
        }

        
    }

}
